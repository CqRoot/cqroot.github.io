<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Qt使用StyleSheet美化QListView或QListWidget</title>
      <link href="2021/02/14/Qt/Qt%E4%BD%BF%E7%94%A8StyleSheet%E7%BE%8E%E5%8C%96QListView%E6%88%96QListWidget/"/>
      <url>2021/02/14/Qt/Qt%E4%BD%BF%E7%94%A8StyleSheet%E7%BE%8E%E5%8C%96QListView%E6%88%96QListWidget/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt使用StyleSheet美化QListView或QListWidget"><a href="#Qt使用StyleSheet美化QListView或QListWidget" class="headerlink" title="Qt使用StyleSheet美化QListView或QListWidget"></a>Qt使用StyleSheet美化QListView或QListWidget</h1><h2 id="1-子控件与伪状态"><a href="#1-子控件与伪状态" class="headerlink" title="1 子控件与伪状态"></a>1 子控件与伪状态</h2><p>QListWidget是QListView的子类，对这两个控件的美化是基本一样的。</p><p>对列表框的美化，分为对它本身的美化和对它的子控件item的美化。</p><p>对列表框的美化，主要就是保持背景色与item一致，以及其他一些通用的属性。</p><p>对item的美化，主要为default，hover，selected三个状态的配置。</p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h2><p>对QListView和QListWidget使用<code>outline: none</code>可以不显示item切换焦点的虚线。</p><p>如果需要对item添加边框，只显示下边框就好了（都设置边框的话前一个item的下边框会和后一个item的上边框叠在一起，边框显得很粗）。</p><p>对于选中状态后列表左侧显示小长条，有两种实现方法，这里直接设置了左边框来实现。对于一些情况控件设置左边框无效的情况下，也可以通过渐变背景色来实现。</p><h2 id="3-编写StyleSheet"><a href="#3-编写StyleSheet" class="headerlink" title="3 编写StyleSheet"></a>3 编写StyleSheet</h2><p>准备了两个QListWidget：listWidget、listWidget_2。其中，listWidget使用亮配色，绘制边框；listWidget_2使用暗配色，不绘制边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">QListView &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget</span>::item &#123;</span><br><span class="line">    background-color: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dbdbdb</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget</span>::item:hover &#123;</span><br><span class="line">    background-color: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget</span>::item:selected &#123;</span><br><span class="line">    border-left: <span class="number">5px</span> solid <span class="number">#777777</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget_2</span>::item &#123;</span><br><span class="line">    background-color: <span class="number">#393d49</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border</span>: transparent;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget_2</span>::item:hover &#123;</span><br><span class="line">    background-color: <span class="number">#4e5465</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#listWidget_2</span>::item:selected &#123;</span><br><span class="line">    border-left: <span class="number">5px</span> solid <span class="number">#009688</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/QkVK7SFcgehwvps.gif" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt使用StyleSheet美化QPushButton</title>
      <link href="2021/02/14/Qt/Qt%E4%BD%BF%E7%94%A8StyleSheet%E7%BE%8E%E5%8C%96QPushButton/"/>
      <url>2021/02/14/Qt/Qt%E4%BD%BF%E7%94%A8StyleSheet%E7%BE%8E%E5%8C%96QPushButton/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt使用StyleSheet美化QPushButton"><a href="#Qt使用StyleSheet美化QPushButton" class="headerlink" title="Qt使用StyleSheet美化QPushButton"></a>Qt使用StyleSheet美化QPushButton</h1><h2 id="1-伪状态"><a href="#1-伪状态" class="headerlink" title="1 伪状态"></a>1 伪状态</h2><p>QPushButton常用的伪状态有：default，hover，pressed，checked。</p><ul><li>default：正常状态</li><li>hover：鼠标划过状态</li><li>pressed：按钮被按下</li><li>checked：按钮被选中</li></ul><blockquote><p>注意：如果仅在QPushButton上设置背景色，需要将border设置为某个值，否则背景可能不会显示。</p></blockquote><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h2><p>对于不可选中的按钮，我们常见的为default（默认）、hover（鼠标滑过）、pressed（按钮按下）三种状态。对于可选中的按钮，还要加一种checked（选中）状态。</p><p>对于按钮，我们主要可以设置的内容有前景色（字体颜色）、背景色、边框（圆角、颜色、粗细）。</p><h2 id="3-编写StyleSheet"><a href="#3-编写StyleSheet" class="headerlink" title="3 编写StyleSheet"></a>3 编写StyleSheet</h2><p>我绘制了三个QPushButton：button1，button2，button3。其中，button2可选中，button3准备使用qss绘制为圆角。</p><p>style sheet代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">QPushButton &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QPushButton<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ecf5ff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#409eff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QPushButton:pressed, QPushButton:checked &#123;</span><br><span class="line">    border: <span class="number">1px</span> solid <span class="number">#3a8ee6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#409eff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#button3</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4 效果"></a>4 效果</h2><p><img src="/images/QnV4vCNY3rA9PpJ.gif" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go Map 类型</title>
      <link href="2021/02/13/Go/Go-Map-%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/02/13/Go/Go-Map-%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-Map-类型"><a href="#Go-Map-类型" class="headerlink" title="Go Map 类型"></a>Go Map 类型</h1><p>Map是一种无序的键值对的集合。通过哈希表实现。</p><h2 id="定义Map"><a href="#定义Map" class="headerlink" title="定义Map"></a>定义Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个Map，但没有分配空间。此时m等于nil</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[key_type]value_type</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用make()创建Map</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[key_type]value_type := <span class="built_in">make</span>(<span class="keyword">map</span>[key_type]value_type)</span><br><span class="line">m                             := <span class="built_in">make</span>(<span class="keyword">map</span>[key_type]value_type)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个Map并初始化</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="string">&quot;item1&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;item2&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key的type通常是数字、string（不可以是slice、map、function）</p><p>value的type可以是数字、string、map、struct。</p><h2 id="判断Map中key是否存在"><a href="#判断Map中key是否存在" class="headerlink" title="判断Map中key是否存在"></a>判断Map中key是否存在</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_, ok := m[<span class="string">&quot;key&quot;</span>]</span><br><span class="line"><span class="comment">// ok为true则key存在，为false则key不存在</span></span><br></pre></td></tr></table></figure><h2 id="删除Map中的元素"><a href="#删除Map中的元素" class="headerlink" title="删除Map中的元素"></a>删除Map中的元素</h2><p>使用<code>delete()</code>函数可以通过key来删除集合中的元素。如果key操作，删除该键值对；如果key不存在，不操作也不报错。</p><p>用法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="遍历Map中的内容"><a href="#遍历Map中的内容" class="headerlink" title="遍历Map中的内容"></a>遍历Map中的内容</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go Slice 切片类型</title>
      <link href="2021/02/13/Go/Go-Slice-%E5%88%87%E7%89%87%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/02/13/Go/Go-Slice-%E5%88%87%E7%89%87%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-Slice-切片类型"><a href="#Go-Slice-切片类型" class="headerlink" title="Go Slice 切片类型"></a>Go Slice 切片类型</h1><p>Slice（切片）可以理解为不固定长度的数组。它的类型和操作比数组更加灵活。Slice是数组的一个引用。</p><h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><p><code>src/runtime/slice.go</code>中Slice的结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有三个元素：</p><ul><li><code>array</code>指向一个数组的指针。</li><li><code>len</code>是Slice的可见元素的个数。使用<code>len()</code>函数可以获取切边的长度。</li><li><code>cap</code>表示Slice指向的内存空间的最大容量（对应元素的个数，而不是字节数）。使用<code>cap()</code>函数可以获取Slice的容量。</li></ul><p>访问Slice中元素时，如果访问的元素超过Slice长度程序会报错。</p><p>向Slice追加元素时，如果Slice总元素数超过Slice容量，Slice会自动扩容。</p><p>数组的长度和容量是一样的。</p><h2 id="定义Slice"><a href="#定义Slice" class="headerlink" title="定义Slice"></a>定义Slice</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个Slice，但没有分配空间。此时s等于nil</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用make()创建Slice，指定了Slice的length（capacity为可选参数）</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, length)</span><br><span class="line">s           := <span class="built_in">make</span>([]<span class="keyword">type</span>, length)</span><br><span class="line">s           := <span class="built_in">make</span>([]<span class="keyword">type</span>, length, capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个Slice并初始化</span></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组arr初始化Slice</span></span><br><span class="line">s := arr[:]</span><br><span class="line">s := arr[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从Slice s初始化Slice</span></span><br><span class="line">s2 := s[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h2 id="向Slice追加元素"><a href="#向Slice追加元素" class="headerlink" title="向Slice追加元素"></a>向Slice追加元素</h2><p>向Slice追加元素使用内置的<code>append()</code>函数。如果追加后总元素数超过Slice的容量，Slice会自动扩容。</p><p>用法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)                 <span class="comment">// 向Slice s追加一个元素</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>)              <span class="comment">// 向Slice s追加两个元素</span></span><br><span class="line">s = <span class="built_in">append</span>(s, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;...) <span class="comment">// 追加一个Slice，Slice需要使用...运算符</span></span><br><span class="line">s = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, s...) <span class="comment">// 向Slice前面追加元素</span></span><br></pre></td></tr></table></figure><p>Slice后使用<code>...</code>运算符会把Slice打散作为参数传递。</p><p>需要注意的是，在Slice容量不足的情况下，append的操作会导致重新分配内存和数据复制。</p><blockquote><p><a href="https://golang.org/ref/spec#Appending_and_copying_slices">https://golang.org/ref/spec#Appending_and_copying_slices</a></p></blockquote><h2 id="遍历Slice元素"><a href="#遍历Slice元素" class="headerlink" title="遍历Slice元素"></a>遍历Slice元素</h2><p>使用内置的<code>range()</code>函数可以遍历Slice元素。用法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> s &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Win10 好用的软件集合</title>
      <link href="2021/02/11/Windows/Win10-%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"/>
      <url>2021/02/11/Windows/Win10-%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10-好用的软件集合"><a href="#Win10-好用的软件集合" class="headerlink" title="Win10 好用的软件集合"></a>Win10 好用的软件集合</h1><p>排名不分先后：</p><table><thead><tr><th>软件</th><th>功能</th><th></th></tr></thead><tbody><tr><td><a href="https://www.microsoft.com/en-us/edge">Microsoft Edge</a></td><td>浏览器</td><td></td></tr><tr><td><a href="https://www.snipaste.com/">Snipaste</a></td><td>截图</td><td>轻量快速的截图+贴图工具。</td></tr><tr><td><a href="https://www.screentogif.com/">ScreenToGif</a></td><td>Gif录屏</td><td>Free screen recorder tool, which lets you record, edit and save as a gif, video or other formats.</td></tr><tr><td><a href="https://www.videolan.org/">VLC media player</a></td><td>视频播放器</td><td>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</td></tr><tr><td><a href="https://potplayer.daum.net/">PotPlayer</a></td><td>视频播放器</td><td></td></tr><tr><td><a href="https://www.tracker-software.com/product/pdf-xchange-editor">PDF-XChange Editor</a></td><td>PDF阅读器</td><td>The smallest, fastest and most feature-rich free PDF viewer/editor on the market.</td></tr><tr><td><a href="https://www.sumatrapdfreader.org/free-pdf-reader.html">SumatraPDF</a></td><td>PDF阅读器</td><td>Sumatra PDF is a free PDF, eBook (ePub, Mobi), XPS, DjVu, CHM, Comic Book (CBZ and CBR) reader for Windows.</td></tr><tr><td><a href="https://www.voidtools.com/zh-cn/">Everything</a></td><td>文件搜索工具</td><td>基于名称快速定位文件和文件夹。</td></tr><tr><td><a href="https://mobaxterm.mobatek.net/">MobaXterm</a></td><td>远程连接工具</td><td>Enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more.</td></tr><tr><td><a href="https://www.bandisoft.com/bandizip/old/6/">BandiZip 6</a></td><td>解压缩工具</td><td>强大的多功能解压缩文件管理工具。支持根据压缩文件内容智能决定直接解压还是解压到文件夹。</td></tr><tr><td><a href="https://www.jianguoyun.com/">坚果云</a></td><td>增量同步云盘</td><td>安全、稳定、快速的云盘/网盘/企业网盘，提供跨平台的文件同步、备份、分享服务。</td></tr><tr><td><a href="https://typora.io/">Typora</a></td><td>Markdown编辑器</td><td>编辑体验最好、所见即所得的Markdown编辑器。</td></tr><tr><td><a href="https://code.visualstudio.com/">Visual Studio Code</a></td><td>代码编辑器</td><td></td></tr><tr><td><a href="https://neovim.io/">Neovim</a></td><td>代码编辑器</td><td>Hyperextensible Vim-based text editor</td></tr><tr><td><a href="https://github.com/vim/vim-win32-installer/">GVim</a></td><td>代码编辑器</td><td></td></tr><tr><td><a href="https://www.gnu.org/software/emacs/">Emacs</a></td><td>代码编辑器</td><td>An extensible, customizable, free/libre text editor — and more.</td></tr><tr><td><a href="https://www.sublimetext.com/3">Sublime Text 3</a></td><td>代码编辑器</td><td>A sophisticated text editor for code, markup and prose.</td></tr><tr><td><a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor</a></td><td>系统状态监视悬浮窗</td><td>用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。</td></tr><tr><td><a href="https://www.foxmail.com/">Foxmail</a></td><td>邮件客户端</td><td>简捷易用的邮件管理专家。更高效，更专业，处理邮件更轻松！</td></tr><tr><td><a href="https://git-scm.com/">Git</a></td><td>代码版本控制工具</td><td>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</td></tr><tr><td><a href="https://www.sublimemerge.com/">Sublime Merge</a></td><td>Git可视化客户端</td><td>Line-by-line Staging. Commit Editing. Unmatched Performance.</td></tr><tr><td><a href="https://github.com/microsoft/PowerToys">Microsoft PowerToys</a></td><td>生产力工具集</td><td>微软官方出品的开源生产力工具集。</td></tr><tr><td><a href="https://github.com/alacritty/alacritty">Alacritty</a></td><td>跨平台终端模拟器</td><td>A cross-platform, OpenGL terminal emulator.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>parted 分区工具</title>
      <link href="2021/02/10/Storage/parted-%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7/"/>
      <url>2021/02/10/Storage/parted-%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="parted-分区工具"><a href="#parted-分区工具" class="headerlink" title="parted - 分区工具"></a>parted - 分区工具</h1><h2 id="查看块设备分区信息"><a href="#查看块设备分区信息" class="headerlink" title="查看块设备分区信息"></a>查看块设备分区信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parted -l</span><br></pre></td></tr></table></figure><h2 id="设置分区表类型"><a href="#设置分区表类型" class="headerlink" title="设置分区表类型"></a>设置分区表类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parted -s /dev/sdX mklabel gpt</span><br></pre></td></tr></table></figure><p>其中，<code>gpt</code>是<code>LABEL-TYPE</code>，其值还可以为<code>msdos</code>（mbr）。</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parted -s /dev/sdX mkpart PART-TYPE [FS-TYPE] START END</span><br></pre></td></tr></table></figure><ul><li><code>PART-TYPE</code> 是分区类型，可选：<code>primary</code> <code>extended</code> <code>logical</code></li><li><code>FS-TYPE</code> 是文件系统类型。mkpart并不会实际创建文件系统，FS-TYPE参数仅是让parted设置一个 1-byte 编码，让启动管理器可以提前知道分区中有什么格式的数据。</li><li><code>START</code> 是分区的起始位置，可以带单位，例如1M。一般写1。</li><li><code>END</code> 是设备的结束位置。可以带单位，也可以用百分比。例如100%表示到设备的末尾。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parted -s /dev/sdb mkpart primary 1 100%</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Storage </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Linux互换左Ctrl和CapsLock</title>
      <link href="2021/02/10/Windows/Windows%E5%92%8CLinux%E4%B8%AD%E4%BA%92%E6%8D%A2%E5%B7%A6Ctrl%E5%92%8CCapsLock/"/>
      <url>2021/02/10/Windows/Windows%E5%92%8CLinux%E4%B8%AD%E4%BA%92%E6%8D%A2%E5%B7%A6Ctrl%E5%92%8CCapsLock/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows和Linux中互换左Ctrl和CapsLock"><a href="#Windows和Linux中互换左Ctrl和CapsLock" class="headerlink" title="Windows和Linux中互换左Ctrl和CapsLock"></a>Windows和Linux中互换左Ctrl和CapsLock</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在Win7之后的系统可以通过修改注册表实现，下面是导出的注册表脚本，双击导入即可：</p><p><em>CapsLockLeftCtrl_switch.reg</em></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line"><span class="section">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;Scancode Map&quot;</span>=hex:<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">03</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">1</span>d,<span class="number">00</span>,<span class="number">3</span>a,<span class="number">00</span>,<span class="number">3</span>a,<span class="number">00</span>,<span class="number">1</span>d,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span></span><br></pre></td></tr></table></figure><p>恢复:</p><p><em>CapsLockLeftCtrl_reset.reg</em></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line"><span class="section">[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Keyboard Layout]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;Scancode Map&quot;</span>=-</span><br></pre></td></tr></table></figure><h3 id="对于值的解释"><a href="#对于值的解释" class="headerlink" title="对于值的解释"></a>对于值的解释</h3><ol><li>header version，总为0</li><li>header flag，总为0</li><li>要更改的键条目数和多余的空终止符行的总和。在这种情况下，更改了2个关键项，因此，更改了3个。</li><li>当处理CAPS LOCK的代码（0x003a）时发送LEFT CTRL的代码（0x001d）。</li><li>步骤4反过来</li><li>空行结束</li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>一次性更换可使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setxkbmap -option ctrl:swapcaps</span><br></pre></td></tr></table></figure><p>如果要实现每次开机都自动实现左Ctrl和CapsLock互换，可以添加以下内容到<code>~/.Xmodmap</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Control_L</span><br><span class="line">add Control = Control_L</span><br></pre></td></tr></table></figure><p>然后在<code>~/.xinitrc</code>中（不同的系统可能会不一样）添加<code>xmodmap ~/.Xmodmap</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim 对特殊字符的操作</title>
      <link href="2021/02/10/Vim/Vim-%E5%AF%B9%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>2021/02/10/Vim/Vim-%E5%AF%B9%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-对特殊字符的操作"><a href="#Vim-对特殊字符的操作" class="headerlink" title="Vim 对特殊字符的操作"></a>Vim 对特殊字符的操作</h1><h2 id="插入特殊字符"><a href="#插入特殊字符" class="headerlink" title="插入特殊字符"></a>插入特殊字符</h2><p>按下<code>Ctrl-V</code>再输入指定内容，可以用来插入一些特殊字符。</p><p><code>Ctrl-V</code>后可输入以下内容：</p><ul><li>任意按键。如在输入模式中按下<code>Ctrl-V</code>，再按下<code>&lt;Esc&gt;</code>后，并不会脱离插入模式。</li><li>若干个十进位数字（小于255）。这会输入这个数字代表的字符。如果数字不足三位，可以再前面添加0。</li><li>x加一个16进制数字。</li><li>o加一个8进制数字。</li></ul><h2 id="查找和替换特殊字符"><a href="#查找和替换特殊字符" class="headerlink" title="查找和替换特殊字符"></a>查找和替换特殊字符</h2><p>在查找和替换的时候，可以使用<code>\%</code>后接以下内容来搜索特殊字符：</p><ul><li><code>\%x</code>后接十六进制数字。</li><li><code>\%d</code>后接十进制数字。</li><li><code>\%o</code>后接八进制数字。</li><li><code>\%u</code>后接最大4位的16进制。</li><li><code>\%U</code>后接最大8位的16进制。</li></ul><h2 id="查看光标所在处字符对应值"><a href="#查看光标所在处字符对应值" class="headerlink" title="查看光标所在处字符对应值"></a>查看光标所在处字符对应值</h2><p>输入<code>ga</code>即可查看光标所在处字符的10进制、16进制、8进制对应值。</p><h2 id="设置不可见字符的显示"><a href="#设置不可见字符的显示" class="headerlink" title="设置不可见字符的显示"></a>设置不可见字符的显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set list</span><br></pre></td></tr></table></figure><p>上述命令即可显示不可见字符，但是缺点是很多字符看起来特别丑。如果你希望用自定义的样式显示不可见字符，可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set listchars&#x3D;tab:&gt;-,trail:-</span><br></pre></td></tr></table></figure><p>上述命令是设置TAB显示为“&gt;—”(“-”的个数不定)，行尾多余的空白字符显示成“-”。</p><p>除了tab和trail，还有很多可以设置的字符，如果：</p><table><thead><tr><th>eol</th><th>行尾显示的字符</th></tr></thead><tbody><tr><td>tab</td><td>显示制表的两或三个字符。其中第二个字符可多次填充。</td></tr><tr><td>space</td><td>空格</td></tr><tr><td>trail</td><td>行尾的空格，如果忽略则同空格</td></tr><tr><td>extends</td><td>如果 ’wrap’ 关闭，而行在屏幕右边界之后还要继续时，最后一列显示的字符。</td></tr><tr><td>precedes</td><td>物理行在可视范围第一列之前还有内容时，第一个可见列显示的字符。</td></tr><tr><td>conceal</td><td>用于替代隐藏文本的字符</td></tr><tr><td>npsp</td><td>不可间断空格的字符（字符0xA0）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
